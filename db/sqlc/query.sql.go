// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/lib/pq"
)

const deleteNewsCategories = `-- name: DeleteNewsCategories :exec
DELETE FROM "NewsCategories"
WHERE "NewsId" = $1
`

func (q *Queries) DeleteNewsCategories(ctx context.Context, newsid int64) error {
	_, err := q.db.ExecContext(ctx, deleteNewsCategories, newsid)
	return err
}

const insertNewsCategories = `-- name: InsertNewsCategories :exec
INSERT INTO "NewsCategories" ("NewsId", "CategoryId")
VALUES ($1, unnest($2::BIGINT []))
`

type InsertNewsCategoriesParams struct {
	NewsId  int64   `json:"NewsId"`
	Column2 []int64 `json:"column_2"`
}

func (q *Queries) InsertNewsCategories(ctx context.Context, arg InsertNewsCategoriesParams) error {
	_, err := q.db.ExecContext(ctx, insertNewsCategories, arg.NewsId, pq.Array(arg.Column2))
	return err
}

const listNews = `-- name: ListNews :many
SELECT n."Id",
    n."Title",
    n."Content",
    COALESCE(array_agg(nc."CategoryId"), '{}') AS "Categories"
FROM "News" n
    LEFT JOIN "NewsCategories" nc ON n."Id" = nc."NewsId"
GROUP BY n."Id",
    n."Title",
    n."Content"
LIMIT $1 OFFSET $2
`

type ListNewsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListNewsRow struct {
	Id         int64       `json:"Id"`
	Title      string      `json:"Title"`
	Content    string      `json:"Content"`
	Categories interface{} `json:"Categories"`
}

func (q *Queries) ListNews(ctx context.Context, arg ListNewsParams) ([]ListNewsRow, error) {
	rows, err := q.db.QueryContext(ctx, listNews, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListNewsRow
	for rows.Next() {
		var i ListNewsRow
		if err := rows.Scan(
			&i.Id,
			&i.Title,
			&i.Content,
			&i.Categories,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateNews = `-- name: UpdateNews :exec
UPDATE "News"
SET "Title" = COALESCE(NULLIF($2, ''), "Title"),
    "Content" = COALESCE(NULLIF($3, ''), "Content")
WHERE "Id" = $1
`

type UpdateNewsParams struct {
	Id      int64       `json:"Id"`
	Column2 interface{} `json:"column_2"`
	Column3 interface{} `json:"column_3"`
}

func (q *Queries) UpdateNews(ctx context.Context, arg UpdateNewsParams) error {
	_, err := q.db.ExecContext(ctx, updateNews, arg.Id, arg.Column2, arg.Column3)
	return err
}
